{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"ComposeThemer <p>This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>allows to define custom user themes and applies them automatically</li> <li>ability to retrieve all registered themes</li> <li>supports system ui theming (status bar + navigation bar)</li> <li>build on top of <code>MaterialTheme</code></li> <li>comes with optional 59 build-in themes</li> <li>offers some edgeToEdge helper functions</li> </ul> <p>Info</p> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"#screenshots","title":"Screenshots","text":"Demo"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module Android iOS JVM Info Core <code>core</code>                \u2714                             \u2714                             \u2714              Modules <code>themes</code>                \u2714                             \u2714                             \u2714"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Compose Multiplatform <code>1.7.1</code> Uses compose <code>1.7.5</code> and material3 <code>1.3.1</code>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> - Modules <code>themes</code> -"},{"location":"me/","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP Compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposeDialogs A compose framework for modal dialogs. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences."},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val composethemer = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.composethemer:core:$composethemer\")\n\n// modules\nimplementation(\"io.github.mflisar.composethemer:themes:$composethemer\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\ncomposethemer = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\ncomposethemer-core = { module = \"io.github.mflisar.composethemer:core\", version.ref = \"composethemer\" }\n\n# modules\ncomposethemer-themes = { module = \"io.github.mflisar.composethemer:themes\", version.ref = \"composethemer\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.composethemer.core)\n\n# modules\nimplementation(libs.composethemer.themes)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#register-themes","title":"Register themes","text":"<p>You must register your themes. In an android app the <code>Application</code> is the perfect place to do it, in <code>jvm</code> somewhere outside of the application scope would be fine. Just make sure that this is only done once.</p> <pre><code>// register available themes\nComposeTheme.register(*ComposeThemes.ALL.toTypedArray())\n\n// or register some of them\n// ComposeTheme.register(\n//     ThemeAmberBlue.get(),\n//     ThemeAquaBlue.get(),\n//     ThemeBahamaAndTrinidad.get(),\n//     // ...\n// )\n\n// get a single theme\n// val theme = ThemeAmberBlue.get()\n\n// or register your own themes...\n// ...\n</code></pre>"},{"location":"usage/#usage","title":"Usage","text":"AndroidOthers <p>For android I do offer additional <code>edgeToEdge</code> features.</p> <pre><code>// simply wrap your composable content inside ComposeTheme as if you would use MaterialTheme directly\nval baseTheme = remember { mutableStateOf(ComposeTheme.BaseTheme.System) }\nval dynamic = remember { mutableStateOf(false) }\nval theme = remember { mutableStateOf(ThemeGreenForest.KEY) } // the key of a registered theme\nval state = ComposeTheme.State(baseTheme, dynamic, theme)\nComposeTheme(state = state) {\n\n    // update edgeToEdge to the correct styles with the provided helper functions\n    // e.g. like following if the layout has a primary toolbar at top and nothing at bottom\n    val landscape = LocalConfiguration.current.orientation == Configuration.ORIENTATION_LANDSCAPE\n    val isDark = state.base.value.isDark()\n    UpdateEdgeToEdgeDefault(\n        activity = this,\n        themeState = state,\n        statusBarColor = MaterialTheme.colorScheme.primary,\n        navigationBarColor = if (landscape) {\n            SystemBarStyle.defaultScrim(resources, isDark)\n        } else MaterialTheme.colorScheme.background,\n        isNavigationBarContrastEnforced = landscape\n    )\n\n    // content\n}\n</code></pre> <pre><code>// simply wrap your composable content inside ComposeTheme as if you would use MaterialTheme directly\nval baseTheme = remember { mutableStateOf(ComposeTheme.BaseTheme.System) }\nval dynamic = remember { mutableStateOf(false) }\nval theme = remember { mutableStateOf(ThemeGreenForest.KEY) } // the key of a registered theme\nval state = ComposeTheme.State(baseTheme, dynamic, theme)\nComposeTheme(state = state) {\n    // content\n}\n</code></pre>"}]}